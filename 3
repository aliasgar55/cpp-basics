#include<iostream>
#include<string>
#include<cstring>


// a string classs to represent the move semantics demo
class String {
public:
    String() = default;

    # constructor
    String(const char* string) {
        std::cout << "created" << std::endl;
        m_size = strlen(string);
        m_data = new char[m_size + 1];
        memcpy(m_data, string, m_size);
    }

    # copy constructor
    String(const String&  other) {
        std::cout << "copied" << std::endl;
        m_size = other.m_size;
        m_data = new char[m_size];
        memcpy(m_data, other.m_data, m_size);
    }

    String(String&&  other) noexcept {
        std::cout << "moved" << std::endl;
        m_size = other.m_size;
        m_data = other.m_data;
             
        other.m_data = nullptr;
        other.m_size = 0;
    }

    ~String() {
        delete m_data;
    }
private:
    uint32_t  m_size;
    char* m_data;
};

class Entity {
public:

    Entity(const String& name)
        :m_name(name) {}

    Entity(String&& name)
        :m_name(std::move(name)) {}
private:
    String m_name;
};


int main() {
    Entity e = Entity("Hello");
}
